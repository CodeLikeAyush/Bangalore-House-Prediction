# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/






# +++++++++++++++++++++++++++++++++ FOR NODEJS++++++++++++++++++++++
# Logs
/server/logs
/server/*.log
/server/npm-debug.log*
/server/yarn-debug.log*
/server/yarn-error.log*
/server/lerna-debug.log*
/server/.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
/server/report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
/server/pids
/server/*.pid
/server/*.seed
/server/*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
/server/lib-cov

# Coverage directory used by tools like istanbul
/server/coverage
/server/*.lcov

# nyc test coverage
/server/.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
/server/.grunt

# Bower dependency directory (https://bower.io/)
/server/bower_components

# node-waf configuration
/server/.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
/server/build/Release

# Dependency directories
/server/node_modules/
/server/jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
/server/web_modules/

# TypeScript cache
/server/*.tsbuildinfo

# Optional npm cache directory
/server/.npm

# Optional eslint cache
/server/.eslintcache

# Optional stylelint cache
/server/.stylelintcache

# Microbundle cache
/server/.rpt2_cache/
/server/.rts2_cache_cjs/
/server/.rts2_cache_es/
/server/.rts2_cache_umd/

# Optional REPL history
/server/.node_repl_history

# Output of 'npm pack'
/server/*.tgz

# Yarn Integrity file
/server/.yarn-integrity

# dotenv environment variable files
/server/.env
/server/.env.development.local
/server/.env.test.local
/server/.env.production.local
/server/.env.local

# parcel-bundler cache (https://parceljs.org/)
/server/.cache
/server/.parcel-cache

# Next.js build output
/server/.next
/server/out

# Nuxt.js build / generate output
/server/.nuxt
/server/dist

# Gatsby files
/server/.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
/server/.vuepress/dist

# vuepress v2.x temp and cache directory
/server/.temp
/server/.cache

# Docusaurus cache and generated files
/server/.docusaurus

# Serverless directories
/server/.serverless/

# FuseBox cache
/server/.fusebox/

# DynamoDB Local files
/server/.dynamodb/

# TernJS port file
/server/.tern-port

# Stores VSCode versions used for testing VSCode extensions
/server/.vscode-test

# yarn v2
/server/.yarn/cache
/server/.yarn/unplugged
/server/.yarn/build-state.yml
/server/.yarn/install-state.gz
/server/.pnp.*

